program = statements ";"?;

statements = statement (";" statement)*;

statement = export | statement-body;

export = "export" statement;

statement-body =
	type-declaration
	| declaration
	| expression;

type-declaration = .identifier type-parameter* "::" type;

type-parameter =
	.identifier
	| "(" type .identifier ")";

type = type-function;

type-function = type-union ("->" type-function)?;

type-union = type-intersection ("|" type-union)?;

type-intersection = type-application ("&" type-intersection)?;

type-application = type-value type-application?;

type-value =
	"{" type-field* "}"
	| "[" type* "]"
	| "(" type ")"
	| literal;

type-field = type-key "::" type;

type-key = literal+;

literal =
	.identifier
	| .constant
	| .string
	| .number
	| .operator;

declaration =
	value-declaration
	| operator-declaration;

value-declaration = .identifier parameter* "=" expression;

operator-declaration = parameter .operator parameter "=" expression;

expression = operation where-clause?;

TODO: match-expression, if-expression

operation = application (.operator operation)?;

application = value application?;

value =
	map
	| list
	| "(" expression ")"
	| literal;

where-clause = "where" declaration ("," declaration)*